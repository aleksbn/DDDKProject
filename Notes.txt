Zadatak: prepraviti klasu EntityConfiguration kako bi napravila random podatke

1.1	Konfiguracija logova uz SeriLog
	1.1.1	Instaliramo Serilog.AspNetCore u nuget package
	1.1.2	Konfigurisemo serilog u Program.cs
1.2	Konfiguracija CORS
	1.2.1	Program.cs - dodavanje polise za pristup end pointima
	1.2.2	Program.cs - upotreba polise za pristup end pointima
2.1	Implementacija klasa i EF-a
	2.1.1	Pravimo novi "Data" folder za entitetske klase
	2.1.2	Dodajemo sve entitetske klase (u jednini), ali bez atributa
	2.1.3	Dodajemo DbContext.cs klasu za bazu
	2.1.4	Ubacujemo Microsoft.EntityFrameworkCore, Microsoft.EntityFrameworkCore.SqlServer i Microsoft.EntityFrameworkCore.Tools namespace preko NuGetPackage Managera
	2.1.5	DatabaseContext.cs - Popunjavamo DatabaseContext klasu (konstruktor i DbSets)
	2.1.6	appsettings.json - Popunjavamo ConnectionString
	2.1.7	Program.cs - Dodajemo bazu podataka (DbContext) prilikom startovanja
	2.1.8	Dodavanje atributa u entitetskim klasama (ukljucujuci i foreignkey elemente) - primjer: Donation.cs
	2.1.9	Dodavanje migracije u NPM-u
			add-migration DatabaseCreated
			update-database
2.2	Ubacivanje podataka u bazu
	2.2.1	Pravimo folder Configurations i dodajemo klasu EntityConfiguration.cs
	2.2.2   DatabseContext.cs - Dodajemo metodu za kreiranje podataka prilikom startovanja aplikacije prvi put
	2.2.3 	Pravimo klasu i metodu za konfigurisanje svake od tabela sa podacima
	2.2.4 	Pozivamo svaku od klasa i metoda za popunjavanje tabele
	2.2.5	Dodajemo migraciju kao u prethodnom tipu - SeedingData
2.3	Service Repository i Dependency Injection
	2.3.1	Dodajemo foldere IRepositoy i Repository u root
	2.3.2	Kreiramo IGenericRepository.cs (u njemu cemo smjestiti sve genericke metode koje cemo koristiti)
	2.3.3	IGenericRepository.cs - Dodajemo genericke metode za CRUD operacije
	2.3.3	Kreiramo GenericRepository.cs
	2.3.4	GenericRepository.cs - Pravimo 2 privatna polja koja sluze tome da se ova klasa ne mora instancirati svaki put kad nam ustreba
	2.3.5	GenericRepository.cs - Pisanje svih metoda naslijedjenih iz IGenericRepository
	2.3.6	Kreiramo IUnitOfWork.cs - sadrži sve kopije repozitorijuma za svaku tabelu
	2.3.7	IUnitOfWork.cs - Pripremamo polje za svaku tabelu iz baze
	2.3.8	Kreiramo UnitOfWork.cs
	2.3.9	UnitOfWork.cs - Postavljamo instancu DbContext klase za dependency injection
2.4	Postavljanje Automapper-a i DTOs
	2.4.1	Dodajemo folder Models u root
	2.4.2	Pravimo DTO klase sa anotacijama
	2.4.3	Dodajemo AutoMapper.Extensions.Microsoft.DependencyInjection u NuGet Package Manager-u
	2.4.4	U configuration folderu kreiramo MapperInitializer.cs
	2.4.5	MapperInitializer.cs - Kreiramo kombinacije za sva pretvaranja jedne klase u drugu
	2.4.6	Program.cs - Ukljucujemo AutoMapper u Startup
3.1	Pravljenje GET zahtjeva
	3.1.1	Kreiramo ApiControllers - jedan po jedan - Zašto imamo UnitOfWork koji će kontroler da koristi? Zbog maintainability-ja, a i da ne koristimo bazu u kontroleru.
	3.1.2	Program.cs - Dodajemo UnitOfWork kako bismo ga mogli koristiti bez instanciranja (klasicni dependency injection) - AddTransient dodaje objekat na svaki zahtjev, AddSingleton je 1 na cijelu aplikaciju, a AddScoped je za odredjeni set zahtjeva, za svaki kontroler koji se instancira
	3.1.3	Sredjujemo cycle error - dodajemo Microsoft.AspNetCore.Mvc.NewtonsoftJson biblioteku preko NuGet package manager-a
	3.1.4	Program.cs - Na .AddControllers() dodajemo .AddNewtonsoftJson() komandu
	3.1.5	Bilo koji kontroler (primjer: DonatorController)
4.1	Podešavanje User Identity uloge
	4.1.1	DatabaseContext.cs - Mijenjamo klasu koja se nasljeđuje, iz DbContext u IdentityDbContext
	4.1.1.1	Kreiramo klasu ModeratorDTO.cs i u nju upisujemo sve sto nam treba (login, register, update)
		(napomena: ako bude trebalo dodatnih polja, mozemo napraviti novu klasu npr ApiUser, staviti da nasljedjuje IdentityUser klasu i podesiti da nam ona bude umjesto IdentityUser tipa u DatabaseContext.cs klasi)
	4.1.2	Kreiramo klasu ServiceExtensions.cs
	4.1.3	ServiceExtensions.cs - Prvo pisemo ovu metodu za konfiguraciju identiteta
	4.1.4	Program.cs - Ukljucujemo sistem autentifikacije (sledece dvije linije)
	4.1.5	Dodavanje migracije u NPM-u
			add-migration AddedIdentity
			update-database
4.2	Dodavanje novog kontrolera (AccountController)
	4.2.1	Kreiranje kontrolera
	4.2.2	MapperInitializer.cs - Dodajemo mapiranje za registracioni DTO
4.3	Dodavanje uloga (roles)
	4.3.1	EntityConfiguration.cs - Za svaku tabelu iz baze podataka unosimo podatke preko ove klase prilikom prvog startovanja
	4.3.2	DatabaseContext.cs - Pozivanje konstruktora klasa koje ce unijeti random podatke
	4.3.3	Dodavanje migracije u NPM-u
			add-migration AddedDefaultValues
			update-database
4.4	Jwt token
	4.4.1	appsettings.json - Pravimo podatke za JWT token za logovanje
	4.4.2	ServiceExtensions.cs - konfigurisemo JTW
	4.4.3	Program.cs - Pozivamo konfiguraciju za Jwt
	4.4.4	Kreiramo novi folder Services
	4.4.5	U njemu kreiramo interfejs IAuthManager.cs
	4.4.6	U njemu kreiramo klasu AuthManager.cs
	4.4.7	Program.cs - Dodajemo AuthManager kako bismo ga mogli koristiti u aplikaciji
	4.4.8	AuthManager.cs - Radimo injection potrebnih objekata
	4.4.9	AuthManager.cs - Prvo radimo provjeru da li korisnik postoji
	4.4.10	AuthManager.cs - Kreiramo token (odnosi se na sljedece 4 funkcije)
4.5	Zastita Endpoints
	4.5.1	Dodajemo [Authorize] anotaciju na sve kontrolere gdje su potrebni (primjer: AccountController.cs)
	4.5.2	Program.cs - Aktiviramo autentifikaciju i autorizaciju
5.1	Dodavanje POST endpointa
	5.1.1	Bilo koji kontroler
5.2	Dodavanje PUT endointa
	5.2.1	Bilo koji kontroler
5.3	Dodavanje DELETE endpointa
	5.3.1	Bilo koji kontroler
6.1	Paginacija
	6.1.1	Kreiramo u folderu Models klasu RequestParams.cs
	6.1.2	Bilo koja metoda koja zahtijeva paginaciju
	6.1.3	IGenericRepository.cs - Ovaj poslednji parametar se dodaje kod paginacije
	6.1.4	GenericRepository.cs - Dodajemo requestParams da bi paginacija radila
6.2	Globalno rjesavanje gresaka
	6.2.1	Kreiramo Errors.cs u Models
	6.2.2	ServiceExtensions.cs - Na app objekat iz Program.cs fajla dodajemo nacin rjesavanja gresaka
	6.2.3	Program.cs - Pozivamo metodu za rjesavanje gresaka